// ‰∏ªÈ¢òÂàáÊç¢ÊåâÈíÆÈÄªËæë
const themeOrder = ["light", "purelight", "dark"];
let currentThemeIdx = 0;
const html = document.documentElement;
window.addEventListener('DOMContentLoaded', () => {
  const themeToggle = document.getElementById("theme-toggle");
  const themeIcon = document.getElementById("theme-icon");
  function setTheme(idx) {
    const theme = themeOrder[idx];
    html.setAttribute("data-theme", theme);
    // ÂàáÊç¢SVGÂõæÊ†á
    if (theme === "dark") {
      themeIcon.innerHTML = `<svg id=\"icon-sun\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"display:block;\"><circle cx=\"12\" cy=\"12\" r=\"5\"/><path d=\"M12 1v2m0 18v2m11-11h-2M3 12H1m16.95 7.07-1.41-1.41M6.34 6.34 4.93 4.93m12.02 0-1.41 1.41M6.34 17.66l-1.41 1.41\"/></svg>`;
    } else if (theme === "purelight") {
      themeIcon.innerHTML = `<svg id=\"icon-sun\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"display:block;\"><circle cx=\"12\" cy=\"12\" r=\"5\"/><path d=\"M12 1v2m0 18v2m11-11h-2M3 12H1m16.95 7.07-1.41-1.41M6.34 6.34 4.93 4.93m12.02 0-1.41 1.41M6.34 17.66l-1.41 1.41\"/></svg>`;
    } else {
      themeIcon.innerHTML = `<svg id=\"icon-moon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"display:block;\"><path d=\"M21 12.79A9 9 0 1 1 11.21 3a7 7 0 0 0 9.79 9.79z\"/></svg>`;
    }
  }
  setTheme(currentThemeIdx);
  if (themeToggle) {
    themeToggle.addEventListener("click", () => {
      currentThemeIdx = (currentThemeIdx + 1) % themeOrder.length;
      setTheme(currentThemeIdx);
    });
  }
});

import { invoke } from "@tauri-apps/api/core";
import { open } from "@tauri-apps/plugin-dialog";
import { listen } from "@tauri-apps/api/event";

// Á´ãÂç≥ÊâßË°åÁöÑÊµãËØï
console.log("=== JavaScript Êñá‰ª∂Â∑≤Âä†ËΩΩ ===");

// ÂÖ®Â±ÄÂèòÈáèÂ≠òÂÇ®Êñá‰ª∂‰ø°ÊÅØ
let loadedFiles = [];
let lastRenameUndoInfo = null;
let undoRenameButton = null;

// DOM ÂÖÉÁ¥†ÂºïÁî®
let dropZone;
let fileTable;
let fileCountElement;
let clearAllButton;
let applyRenameButton;

// Tab Áõ∏ÂÖ≥ÂÖÉÁ¥†
let tabLinks;
let tabContents;

// ËæìÂÖ•Ê°ÜÂÖÉÁ¥†
let findInput;
let replaceInput;
let startInput;
let digitsInput;
let positionRadios;

// ÂàùÂßãÂåñ
document.addEventListener("DOMContentLoaded", function () {
  console.log("=== DOM Â∑≤Âä†ËΩΩÔºåÂºÄÂßãÂàùÂßãÂåñ ===");
  
  initializeElements();
  initializeEventListeners();
  
  // Ê∑ªÂä†ÁÆÄÂçïÁöÑÊãñÊãΩÊµãËØï
  testDragDrop();
});

// ÁÆÄÂçïÁöÑÊãñÊãΩÊµãËØïÂáΩÊï∞
function testDragDrop() {
  console.log("=== ÂºÄÂßãËÆæÁΩÆÊãñÊãΩÊµãËØï ===");
  
  // Âú®Êï¥‰∏™ÊñáÊ°£‰∏äÁõëÂê¨ÊãñÊãΩ‰∫ã‰ª∂
  document.addEventListener('dragenter', function(e) {
    console.log('üî• Document dragenter detected!', e);
    document.body.style.border = '3px solid red';
    e.preventDefault();
  });
  
  document.addEventListener('dragover', function(e) {
    console.log('üî• Document dragover detected!', e);
    e.preventDefault();
  });
  
  document.addEventListener('drop', function(e) {
    console.log('üî• Document drop detected!', e);
    console.log('üî• Files:', e.dataTransfer.files);
    document.body.style.border = '';
    e.preventDefault();
  });
  
  document.addEventListener('dragleave', function(e) {
    console.log('üî• Document dragleave detected!', e);
    document.body.style.border = '';
  });
  
  // ‰πüÂú® body ‰∏äÁõëÂê¨
  document.body.addEventListener('dragenter', function(e) {
    console.log('üü¢ Body dragenter detected!', e);
    e.preventDefault();
  });
  
  document.body.addEventListener('dragover', function(e) {
    console.log('üü¢ Body dragover detected!', e);
    e.preventDefault();
  });
  
  document.body.addEventListener('drop', function(e) {
    console.log('üü¢ Body drop detected!', e);
    e.preventDefault();
  });
  
  console.log("=== ÊãñÊãΩÊµãËØïÁõëÂê¨Âô®Â∑≤ËÆæÁΩÆ ===");
}

function initializeElements() {
  dropZone = document.getElementById("drop-zone");
  fileTable = document.querySelector("tbody");
  fileCountElement = document.getElementById("file-count");
  clearAllButton = document.getElementById("clear-all");
  applyRenameButton = document.getElementById("apply-rename");
  undoRenameButton = document.getElementById("undo-rename");

  tabLinks = document.querySelectorAll(".tab-link");
  tabContents = document.querySelectorAll(".tab-content");

  findInput = document.getElementById("find");
  replaceInput = document.getElementById("replace");
  startInput = document.getElementById("start");
  digitsInput = document.getElementById("digits");
  positionRadios = document.querySelectorAll('input[name="position"]');
}

function initializeEventListeners() {
  // Êñá‰ª∂ÊãñÊãΩÂíåÈÄâÊã©
  setupFileHandling();

  // Tab ÂàáÊç¢
  setupTabSwitching();

  // ÂÆûÊó∂È¢ÑËßà
  setupRealTimePreview();

  // ÊåâÈíÆ‰∫ã‰ª∂
  setupButtonEvents();

  // Tauri ÊãñÊãΩ‰∫ã‰ª∂ÁõëÂê¨
  setupTauriDragDrop();
}

// Êñá‰ª∂Â§ÑÁêÜÁõ∏ÂÖ≥
function setupFileHandling() {
  // ÈÄâÊã©Êñá‰ª∂ÊåâÈíÆ
  const selectFilesBtn = document.getElementById("select-files-btn");
  const selectFolderBtn = document.getElementById("select-folder-btn");

  selectFilesBtn.addEventListener("click", async () => {
    try {
      const selected = await open({
        multiple: true,
        directory: false,
      });

      if (selected) {
        const paths = Array.isArray(selected) ? selected : [selected];
        await handleFilePathsWithFolders(paths);
      }
    } catch (error) {
      console.error("Êñá‰ª∂ÈÄâÊã©Â§±Ë¥•:", error);
      alert("Êñá‰ª∂ÈÄâÊã©Â§±Ë¥•: " + error.message);
    }
  });

  selectFolderBtn.addEventListener("click", async () => {
    try {
      const selected = await open({
        multiple: true,
        directory: true,
      });

      if (selected) {
        const paths = Array.isArray(selected) ? selected : [selected];
        await handleFilePathsWithFolders(paths);
      }
    } catch (error) {
      console.error("Êñá‰ª∂Â§πÈÄâÊã©Â§±Ë¥•:", error);
      alert("Êñá‰ª∂Â§πÈÄâÊã©Â§±Ë¥•: " + error.message);
    }
  });

  // Âü∫Êú¨ÁöÑÊãñÊãΩÊ†∑ÂºèÂ§ÑÁêÜÔºàÂÆûÈôÖÊãñÊãΩÁî± Tauri ‰∫ã‰ª∂Â§ÑÁêÜÔºâ
  dropZone.addEventListener("dragover", (e) => {
    e.preventDefault();
    e.stopPropagation();
  });

  dropZone.addEventListener("dragleave", (e) => {
    e.preventDefault();
    e.stopPropagation();
  });

  dropZone.addEventListener("drop", (e) => {
    e.preventDefault();
    e.stopPropagation();
    // Tauri ‰∫ã‰ª∂Á≥ªÁªü‰ºöÂ§ÑÁêÜÂÆûÈôÖÁöÑÊñá‰ª∂ÊãñÊãΩ
  });
}

// Tauri ÊãñÊãΩ‰∫ã‰ª∂Â§ÑÁêÜ
async function setupTauriDragDrop() {
  try {
    console.log("=== ÂºÄÂßãËÆæÁΩÆ Tauri ÊãñÊãΩ‰∫ã‰ª∂ ===");
    
    // ÁõëÂê¨Êñá‰ª∂ÊãñÊãΩ‰∫ã‰ª∂
    await listen("tauri://file-drop", async (event) => {
      console.log("üöÄ Ê£ÄÊµãÂà∞ Tauri Êñá‰ª∂ÊãñÊãΩ‰∫ã‰ª∂:", event);
      const filePaths = event.payload;

      if (filePaths && filePaths.length > 0) {
        console.log("üöÄ ÊãñÊãΩÁöÑÊñá‰ª∂Ë∑ØÂæÑ:", filePaths);
        await handleFilePathsWithFolders(filePaths);
      }
    });

    // ÁõëÂê¨ÊãñÊãΩÊÇ¨ÂÅú‰∫ã‰ª∂
    await listen("tauri://file-drop-hover", (event) => {
      console.log("üöÄ Êñá‰ª∂ÊãñÊãΩÊÇ¨ÂÅú:", event);
      document.body.style.backgroundColor = "var(--pico-primary-background)";
    });

    // ÁõëÂê¨ÊãñÊãΩÂèñÊ∂à‰∫ã‰ª∂
    await listen("tauri://file-drop-cancelled", (event) => {
      console.log("üöÄ Êñá‰ª∂ÊãñÊãΩÂèñÊ∂à:", event);
      document.body.style.backgroundColor = "";
    });

    console.log("=== Tauri ÊãñÊãΩ‰∫ã‰ª∂ÁõëÂê¨Âô®Â∑≤ËÆæÁΩÆ ===");
    
    // ÊµãËØïÔºö3ÁßíÂêéÊòæÁ§∫‰∏Ä‰∏™ÊèêÁ§∫ÔºåÁ°ÆËÆ§ JavaScript Ê≠£Âú®ËøêË°å
    setTimeout(() => {
      console.log("‚úÖ JavaScript Ê≠£Âú®Ê≠£Â∏∏ËøêË°åÔºåÊãñÊãΩÂäüËÉΩÂ∫îËØ•Â∑≤ÊøÄÊ¥ª");
      console.log("‚úÖ ËØ∑Â∞ùËØï‰ªé Finder ÊãñÊãΩÊñá‰ª∂Âà∞Â∫îÁî®Á™óÂè£");
    }, 3000);
    
  } catch (error) {
    console.error("‚ùå ËÆæÁΩÆ Tauri ÊãñÊãΩ‰∫ã‰ª∂Â§±Ë¥•:", error);
  }
}

async function handleFilePathsWithFolders(paths) {
  // ÊòæÁ§∫Âä†ËΩΩ‰∏≠ÊèêÁ§∫
  const fileCountElem = document.getElementById('file-count');
  let loadingBackup = '';
  if (fileCountElem) {
    loadingBackup = fileCountElem.textContent;
    fileCountElem.textContent = 'Ê≠£Âú®Âä†ËΩΩÊñá‰ª∂ÔºåËØ∑Á®çÂÄô...';
  }
  let timeoutId = null;
  try {
    // Ë∂ÖÊó∂‰øùÊä§ÔºàÂ¶Ç10ÁßíÊú™ËøîÂõûÔºåÊèêÁ§∫Áî®Êà∑Ôºâ
    let timedOut = false;
    timeoutId = setTimeout(() => {
      timedOut = true;
      if (fileCountElem) fileCountElem.textContent = 'Âä†ËΩΩÊñá‰ª∂Ë∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•Êñá‰ª∂Â§πÂÜÖÂÆπÊàñÈáçËØï';
      alert('Êñá‰ª∂Â§πÂÜÖÂÆπËøáÂ§ßÊàñÂ§ÑÁêÜË∂ÖÊó∂ÔºåËØ∑Á®çÂêéÈáçËØïÊàñÂàÜÊâπÂØºÂÖ•„ÄÇ');
    }, 10000);

    console.log("Â§ÑÁêÜË∑ØÂæÑÔºàÂèØËÉΩÂåÖÂê´Êñá‰ª∂Â§πÔºâ:", paths);
    const allFilePaths = await invoke("get_files_from_paths", { paths });
    if (timedOut) return;
    clearTimeout(timeoutId);
    console.log("Â±ïÂºÄÂêéÁöÑÊâÄÊúâÊñá‰ª∂:", allFilePaths);
    // ÊîØÊåÅÁöÑÊâ©Â±ïÂêçÔºàÂ∏∏ËßÅÂõæÁâá/ÊñáÊ°£/ËßÜÈ¢ë/ÂéãÁº©ÂåÖÁ≠âÔºâ
    const allowedExts = [
      'jpg','jpeg','png','gif','bmp','webp','svg','heic','tiff',
      'pdf','doc','docx','xls','xlsx','ppt','pptx','txt','md','csv',
      'mp4','mov','avi','mkv','webm','mp3','wav','aac','flac','zip','rar','7z','tar','gz'
    ];
    // Ê∏ÖÁ©∫Áé∞ÊúâÊñá‰ª∂ÂíåË°®Ê†º
    loadedFiles = [];
    clearTable();
    // ÁªüËÆ°Êñá‰ª∂Â§πÊï∞ÈáèÔºàÂè™ÁªüËÆ°ÁõÆÂΩïË∑ØÂæÑÔºâ
    let folderCount = 0;
    paths.forEach((p) => {
      // ÁÆÄÂçïÂà§Êñ≠Ôºö‰∏çÊòØ‰ª•.Êâ©Â±ïÂêçÁªìÂ∞æÁöÑË∑ØÂæÑËßÜ‰∏∫Êñá‰ª∂Â§π
      if (!p.split('/').pop().includes('.')) folderCount++;
    });
    // ËøáÊª§Âπ∂Êî∂ÈõÜÊîØÊåÅÁöÑÊñá‰ª∂
    allFilePaths.forEach((filePath) => {
      const fileName = filePath.split("/").pop() || filePath.split("\\").pop();
      const ext = fileName.includes('.') ? fileName.split('.').pop().toLowerCase() : '';
      if (allowedExts.includes(ext)) {
        loadedFiles.push({ name: fileName, path: filePath });
      }
    });
    // Êõ¥Êñ∞ÊòæÁ§∫
    updateFileTable();
    updateFileCount();
    updatePreview();
    // ÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ
    const fileCountElem = document.getElementById('file-count');
    if (fileCountElem) {
      fileCountElem.textContent = `Â∑≤Âä†ËΩΩ ${loadedFiles.length} ‰∏™Êñá‰ª∂` + (folderCount > 0 ? `Ôºå${folderCount} ‰∏™Êñá‰ª∂Â§π` : '');
    }
    // Á©∫Áä∂ÊÄÅÊèêÁ§∫Ë°åÊòæÁ§∫/ÈöêËóè
    const emptyRow = document.getElementById('empty-tip-row');
    if (emptyRow) emptyRow.style.display = loadedFiles.length === 0 ? '' : 'none';
    // Á©∫Êñá‰ª∂Â§πÊàñÊó†ÊúâÊïàÊñá‰ª∂Êó∂ÂèãÂ•ΩÊèêÁ§∫
    if (loadedFiles.length === 0) {
      alert(folderCount > 0 ? 'Êú™Ê£ÄÊµãÂà∞ÂèØÂØºÂÖ•ÁöÑÊñá‰ª∂ÔºåÂèØËÉΩÊñá‰ª∂Â§π‰∏∫Á©∫Êàñ‰∏çÂåÖÂê´ÊîØÊåÅÁöÑÊñá‰ª∂Á±ªÂûã„ÄÇ' : 'Êú™Ê£ÄÊµãÂà∞ÂèØÂØºÂÖ•ÁöÑÊñá‰ª∂„ÄÇ');
    }
  } catch (error) {
    console.error("Â§ÑÁêÜÊñá‰ª∂Ë∑ØÂæÑÂ§±Ë¥•:", error);
    alert("Â§ÑÁêÜÊñá‰ª∂Ë∑ØÂæÑÂ§±Ë¥•: " + error.message);
  } finally {
    if (fileCountElem) fileCountElem.textContent = loadingBackup;
  }
}

function clearTable() {
  if (!fileTable) return;
  fileTable.innerHTML = '';
}

function updateFileTable() {
  clearTable();
  const emptyRow = document.getElementById('empty-tip-row');
  const applyRenameButton = document.getElementById('apply-rename');
  if (loadedFiles.length === 0) {
    if (emptyRow) emptyRow.style.display = '';
    if (applyRenameButton) applyRenameButton.disabled = true;
    return;
  }
  if (emptyRow) emptyRow.style.display = 'none';
  // ÁîüÊàêÊâÄÊúâÊñ∞Êñá‰ª∂Âêç
  const previewNames = loadedFiles.map(f => getPreviewName(f.name));
  // Ê£ÄÊü•ÂÜ≤Á™ÅÂíåÈùûÊ≥ïÂ≠óÁ¨¶
  const nameSet = new Set();
  let hasConflict = false;
  let illegalRows = [];
  previewNames.forEach((name, idx) => {
    // Ê£ÄÊü•ÈùûÊ≥ïÂ≠óÁ¨¶
    if (/[\\/:*?"<>|]/.test(name)) {
      illegalRows.push(idx);
      hasConflict = true;
    }
    // Ê£ÄÊü•ÈáçÂêç
    if (nameSet.has(name)) {
      hasConflict = true;
    } else {
      nameSet.add(name);
    }
  });
  // Ê∏≤ÊüìË°®Ê†º
  loadedFiles.forEach((fileInfo, index) => {
    const previewHTML = getPreviewName(fileInfo.name, true);
    const hasChange = previewHTML && !previewHTML.includes('(Êó†ÂèòÂåñ)');
    const isIllegal = illegalRows.includes(index);
    const isDuplicate = previewNames.indexOf(previewNames[index]) !== index;
    const row = document.createElement("tr");
    let warn = '';
    if (isIllegal) warn = '<span style="color:#c00;font-size:0.9em;">(ÈùûÊ≥ïÂ≠óÁ¨¶)</span>';
    if (isDuplicate) warn = '<span style="color:#c00;font-size:0.9em;">(ÈáçÂêçÂÜ≤Á™Å)</span>';
    row.innerHTML = `
      <th scope="row">${index + 1}</th>
      <td>${fileInfo.name}</td>
      <td class="preview-cell ${hasChange ? "preview-highlight" : "dimmed"}" style="font-family:monospace;">
        ${previewHTML} ${warn}
      </td>
    `;
    if (isIllegal || isDuplicate) row.style.background = '#ffeaea';
    fileTable.appendChild(row);
  });
  // ÂÜ≤Á™ÅÊó∂Á¶ÅÁî®ÊåâÈíÆ
  if (applyRenameButton) applyRenameButton.disabled = hasConflict;
}

function updateFileCount() {
  fileCountElement.textContent = `Â∑≤Âä†ËΩΩ ${loadedFiles.length} ‰∏™Êñá‰ª∂`;
}

// Tab ÂàáÊç¢Áõ∏ÂÖ≥
function setupTabSwitching() {
  tabLinks.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      // ÁßªÈô§ÊâÄÊúâ active class
      tabLinks.forEach((b) => b.classList.remove("active"));
      tabContents.forEach((c) => c.classList.remove("active"));
      // Ê∑ªÂä† active class
      btn.classList.add("active");
      const tabId = btn.getAttribute("data-tab");
      const tabContent = document.getElementById(tabId);
      if (tabContent) {
        tabContent.classList.add("active");
      }
      
      updatePreview();
    });
  });
}
// Á°Æ‰øùÂàùÂßãÂåñÊó∂setupTabSwitchingË¢´Ë∞ÉÁî®
// Â∑≤Âú®initializeEventListeners‰∏≠Ë∞ÉÁî®ÔºåÊó†ÈúÄÈáçÂ§çË∞ÉÁî®

// ÂÆûÊó∂È¢ÑËßàÁõ∏ÂÖ≥
function setupRealTimePreview() {
  // Êü•ÊâæÊõøÊç¢ËæìÂÖ•Ê°Ü
  findInput.addEventListener("input", updatePreview);
  replaceInput.addEventListener("input", updatePreview);

  // Â∫èÂàóÂè∑ËæìÂÖ•Ê°Ü
  startInput.addEventListener("input", updatePreview);
  digitsInput.addEventListener("input", updatePreview);

  // ‰ΩçÁΩÆÂçïÈÄâÊ°Ü
  positionRadios.forEach((radio) => {
    radio.addEventListener("change", updatePreview);
  });

  // Â§ßÂ∞èÂÜôËΩ¨Êç¢ÊåâÈíÆÔºàÂÆûÊó∂È¢ÑËßàÔºâ
  const caseButtons = document.querySelectorAll("#tab-case button");
  caseButtons.forEach((button) => {
    button.addEventListener("click", () => {
      // ËÆ∞ÂΩïÊøÄÊ¥ªÊåâÈíÆÂπ∂Âà∑Êñ∞È¢ÑËßà
      caseButtons.forEach((b) => b.classList.remove("active"));
      button.classList.add("active");
      updatePreview();
    });
  });
}

function updatePreview() {
  if (loadedFiles.length === 0) return;

  // Êõ¥Êñ∞ÊâÄÊúâÊñá‰ª∂ÁöÑÈ¢ÑËßà
  const previewCells = document.querySelectorAll(".preview-cell");

  loadedFiles.forEach((fileInfo, index) => {
    if (index < previewCells.length) {
      const previewName = getPreviewName(fileInfo.name);
      const cell = previewCells[index];

      if (previewName !== fileInfo.name) {
        cell.textContent = previewName;
        cell.className = "preview-cell preview-highlight";
      } else {
        cell.textContent = "(Êó†ÂèòÂåñ)";
        cell.className = "preview-cell dimmed";
      }
    }
  });
}

function getPreviewName(fileName, withHighlight = false) {
  const activeTab = document.querySelector(".tab-content.active");
  if (!activeTab) return fileName;
  const tabId = activeTab.id;
  switch (tabId) {
    case "tab-replace":
      return getPreviewForReplace(fileName, withHighlight);
    case "tab-sequence":
      return getPreviewForSequence(fileName, withHighlight);
    case "tab-case": {
      const activeCaseBtn = document.querySelector("#tab-case button.active");
      if (!activeCaseBtn) return fileName;
      const text = activeCaseBtn.textContent;
      let newName = fileName;
      if (text.includes("Â∞èÂÜô")) newName = fileName.toLowerCase();
      else if (text.includes("Â§ßÂÜô")) newName = fileName.toUpperCase();
      else if (text.includes("È¶ñÂ≠óÊØç")) newName = fileName.replace(/(^|[^a-zA-Z])([a-z])/g, (m, pre, char) => pre + char.toUpperCase());
      if (withHighlight && newName !== fileName) {
        // È´ò‰∫ÆÂèòÂåñÈÉ®ÂàÜ
        let html = '';
        for (let i = 0; i < newName.length; i++) {
          if (fileName[i] !== newName[i]) {
            html += `<span class='highlight'>${newName[i] || ''}</span>`;
          } else {
            html += newName[i] || '';
          }
        }
        return html;
      }
      return newName;
    }
    default:
      return fileName;
  }
}

function getPreviewForReplace(fileName) {
  const findText = findInput.value;
  const replaceText = replaceInput.value;

  if (!findText) return fileName;

  return fileName.replace(new RegExp(findText, "g"), replaceText);
}

function getPreviewForSequence(fileName, withHighlight = false) {
  const start = parseInt(startInput.value) || 1;
  const digits = parseInt(digitsInput.value) || 2;
  const position = document.querySelector('input[name="position"]:checked').value;
  const sequenceNumber = start.toString().padStart(digits, "0");
  const fileExtension = fileName.includes(".") ? "." + fileName.split(".").pop() : "";
  const fileNameWithoutExt = fileName.includes(".") ? fileName.substring(0, fileName.lastIndexOf(".")) : fileName;
  let newName = position === "prefix"
    ? `${sequenceNumber}_${fileName}`
    : `${fileNameWithoutExt}_${sequenceNumber}${fileExtension}`;
  if (!withHighlight || newName === fileName) return newName;
  // È´ò‰∫ÆÂ∫èÂàóÂè∑ÈÉ®ÂàÜ
  if (position === "prefix") {
    return `<span class='highlight'>${sequenceNumber}_</span>${fileName}`;
  } else {
    return `${fileNameWithoutExt}_<span class='highlight'>${sequenceNumber}</span>${fileExtension}`;
  }
}

// ÊåâÈíÆ‰∫ã‰ª∂Áõ∏ÂÖ≥
function setupButtonEvents() {
  // Êí§ÈîÄÊåâÈíÆ‰∫ã‰ª∂
  if (undoRenameButton) {
    undoRenameButton.addEventListener("click", async () => {
      if (!lastRenameUndoInfo) return;
      try {
        const result = await invoke("undo_rename", lastRenameUndoInfo);
        if (result.success) {
          alert("Â∑≤Êí§ÈîÄ‰∏ä‰∏ÄÊ¨°ÈáçÂëΩÂêç");
          undoRenameButton.disabled = true;
          lastRenameUndoInfo = null;
        } else {
          alert(result.error_message || "Êí§ÈîÄÂ§±Ë¥•");
        }
      } catch (error) {
        alert("Êí§ÈîÄÊìç‰ΩúÂèëÁîüÈîôËØØ: " + error.message);
      }
    });
  }

  // Ê∏ÖÁ©∫ÊåâÈíÆ
  clearAllButton.addEventListener("click", () => {
    // Ê∏ÖÁ©∫Êñá‰ª∂ÂàóË°®
    loadedFiles = [];
    clearTable();
    updateFileCount();

    // Ê∏ÖÁ©∫ÊâÄÊúâËæìÂÖ•Ê°Ü
    findInput.value = "";
    replaceInput.value = "";
    startInput.value = "1";
    digitsInput.value = "2";

    // ÈáçÁΩÆÂçïÈÄâÊ°ÜÂà∞ÈªòËÆ§Áä∂ÊÄÅ
    document.getElementById("pos-prefix").checked = true;
  });

  // ÊâßË°åÈáçÂëΩÂêçÊåâÈíÆ
  applyRenameButton.addEventListener("click", async () => {
    console.log("ÁÇπÂáª‰∫ÜÊâßË°åÈáçÂëΩÂêçÊåâÈíÆ");

    // Êî∂ÈõÜÊñá‰ª∂Ë∑ØÂæÑÊï∞ÁªÑ
    const filePaths = loadedFiles.map((fileInfo) => fileInfo.path);

    // Êî∂ÈõÜÂΩìÂâçÊøÄÊ¥ªÈÄâÈ°πÂç°ÂíåËßÑÂàôÊï∞ÊçÆ
    const activeTab = document.querySelector(".tab-content.active");
    const activeTabId = activeTab.id.replace("tab-", "");

    let ruleData = {};

    switch (activeTabId) {
      case "replace":
        ruleData = {
          find: findInput.value,
          replace: replaceInput.value,
        };
        break;
      case "sequence":
        ruleData = {
          start: parseInt(startInput.value) || 1,
          digits: parseInt(digitsInput.value) || 2,
          position: document.querySelector('input[name="position"]:checked')
            .value,
        };
        break;
      case "case": {
        // ËÆ∞ÂΩïÂ§ßÂ∞èÂÜôËßÑÂàôÁ±ªÂûã
        const activeCaseBtn = document.querySelector("#tab-case button.active");
        let caseType = "";
        if (activeCaseBtn) {
          if (activeCaseBtn.textContent.includes("Â∞èÂÜô")) caseType = "lower";
          else if (activeCaseBtn.textContent.includes("Â§ßÂÜô")) caseType = "upper";
          else if (activeCaseBtn.textContent.includes("È¶ñÂ≠óÊØç")) caseType = "capitalize";
        }
        ruleData = { caseType };
        break;
      }
    }

    // ÊâìÂç∞Êî∂ÈõÜÂà∞ÁöÑÊï∞ÊçÆ
    console.log("Êñá‰ª∂Ë∑ØÂæÑÊï∞ÁªÑ:", filePaths);
    console.log("ÊøÄÊ¥ªÁöÑÈÄâÈ°πÂç°:", activeTabId);
    console.log("ËßÑÂàôÊï∞ÊçÆ:", ruleData);

    // Ë∞ÉÁî® Tauri ÂêéÁ´ØÊâßË°åÈáçÂëΩÂêç
    await executeRename(filePaths, activeTabId, ruleData);
  });
}

// Ë∞ÉÁî® Tauri ÂêéÁ´ØÊâßË°åÈáçÂëΩÂêç
async function executeRename(filePaths, activeTabId, ruleData) {
  if (filePaths.length === 0) {
    alert("ËØ∑ÂÖàÈÄâÊã©Êñá‰ª∂");
    return;
  }

    // Ê†°È™åËßÑÂàô
  if (activeTabId === "replace" && !ruleData.find) {
    alert("ËØ∑ËæìÂÖ•Ë¶ÅÊü•ÊâæÁöÑÂÜÖÂÆπ");
    return;
  }
  if (activeTabId === "sequence" && (!ruleData.start || !ruleData.digits)) {
    alert("ËØ∑Â°´ÂÜôÂ∫èÂàóÂè∑Ëµ∑ÂßãÂíå‰ΩçÊï∞");
    return;
  }
  if (activeTabId === "case" && !ruleData.caseType) {
    alert("ËØ∑ÈÄâÊã©Â§ßÂ∞èÂÜôËΩ¨Êç¢Á±ªÂûã");
    return;
  }
  try {
    let backendRule = {};
    if (activeTabId === "replace") {
      backendRule = {
        type: "replace",
        find: ruleData.find,
        replace: ruleData.replace || "",
      };
    } else if (activeTabId === "sequence") {
      backendRule = {
        type: "sequence",
        start: ruleData.start,
        digits: ruleData.digits,
        position: ruleData.position,
      };
    } else if (activeTabId === "case") {
      backendRule = {
        type: "case",
        caseType: ruleData.caseType, // "upper" | "lower" | "capitalize"
      };
    }
    const result = await invoke("execute_rename", {
      filePaths: filePaths,
      rule: backendRule,
    });
    console.log("ÈáçÂëΩÂêçÁªìÊûú:", result);
    if (result.success) {
      if (result.renamed_count > 0) {
        alert(`ÊàêÂäüÈáçÂëΩÂêç ${result.renamed_count} ‰∏™Êñá‰ª∂`);
        // ‰øùÂ≠òÊí§ÈîÄ‰ø°ÊÅØ
        if (Array.isArray(result.undo_info)) {
          lastRenameUndoInfo = { undo_map: result.undo_info };
          if (undoRenameButton) undoRenameButton.disabled = false;
        } else {
          lastRenameUndoInfo = null;
          if (undoRenameButton) undoRenameButton.disabled = true;
        }
        loadedFiles = [];
        clearTable();
        updateFileCount();
      } else {
        alert(result.error_message || "Ê≤°ÊúâÊñá‰ª∂ÈúÄË¶ÅÈáçÂëΩÂêç");
      }
    } else {
      alert(`ÈáçÂëΩÂêçÂ§±Ë¥•: ${result.error_message || "Êú™Áü•ÈîôËØØ"}`);
    }
  } catch (error) {
    console.error("Ë∞ÉÁî®ÂêéÁ´ØÂ§±Ë¥•:", error);
    alert("ÊâßË°åÈáçÂëΩÂêçÊó∂ÂèëÁîüÈîôËØØ: " + error.message);
  }
}
